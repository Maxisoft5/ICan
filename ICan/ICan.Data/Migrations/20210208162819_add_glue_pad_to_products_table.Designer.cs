// <auto-generated />
using System;
using ICan.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ICan.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210208162819_add_glue_pad_to_products_table")]
    partial class add_glue_pad_to_products_table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ICan.Common.Domain.OptAssembly", b =>
                {
                    b.Property<int>("AssemblyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AssemblyID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AssemblyType")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("AssemblyId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId")
                        .IsUnique();

                    b.ToTable("opt_assembly");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptAssemblySemiproduct", b =>
                {
                    b.Property<int>("AssemblySemiproductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("int");

                    b.Property<int>("AssemblyId")
                        .HasColumnName("AssemblyID")
                        .HasColumnType("int");

                    b.Property<int?>("NotchOrderId")
                        .HasColumnType("int");

                    b.Property<int?>("PrintOrderSemiproductId")
                        .HasColumnName("PrintOrderSemiproductId")
                        .HasColumnType("int");

                    b.HasKey("AssemblySemiproductId");

                    b.HasIndex("AssemblyId");

                    b.HasIndex("NotchOrderId");

                    b.HasIndex("PrintOrderSemiproductId");

                    b.ToTable("opt_assemblysemiproduct");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptCounterparty", b =>
                {
                    b.Property<int>("CounterpartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CounterpartyID")
                        .HasColumnType("int");

                    b.Property<string>("Consignee")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Inn")
                        .HasColumnType("varchar(12) CHARACTER SET utf8mb4")
                        .HasMaxLength(12);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("PaperOrderRoleId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentDelay")
                        .HasColumnType("int");

                    b.HasKey("CounterpartyId");

                    b.HasIndex("PaperOrderRoleId");

                    b.ToTable("opt_counterparty");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Prefix")
                        .HasColumnType("varchar(10)");

                    b.HasKey("CountryId");

                    b.ToTable("opt_country");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptDiscount", b =>
                {
                    b.Property<long>("DiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("DiscountID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<float>("Value")
                        .HasColumnType("float");

                    b.HasKey("DiscountId");

                    b.ToTable("opt_discount");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptEvent", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("EventID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<float>("DiscountPercent")
                        .HasColumnType("float");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("EventId");

                    b.ToTable("opt_event");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptFormat", b =>
                {
                    b.Property<int>("FormatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("FormatID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("FormatId");

                    b.ToTable("opt_format");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptGlobalSetting", b =>
                {
                    b.Property<int>("GlobalSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GlobalSettingID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(1000) CHARACTER SET utf8mb4")
                        .HasMaxLength(1000);

                    b.HasKey("GlobalSettingId");

                    b.ToTable("opt_globalsetting");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptKitproduct", b =>
                {
                    b.Property<int>("KitProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MainProductId")
                        .HasColumnName("MainProductID")
                        .HasColumnType("int(11)");

                    b.Property<int>("OrderNum")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.HasKey("KitProductId");

                    b.HasIndex("MainProductId");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("opt_kitproduct");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptMarketplace", b =>
                {
                    b.Property<int>("MarketplaceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ImageName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MarketplaceId");

                    b.ToTable("opt_marketplace");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptMarketplaceProduct", b =>
                {
                    b.Property<int>("MarketplaceProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MarketplaceId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("Raiting")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("MarketplaceProductId");

                    b.HasIndex("MarketplaceId");

                    b.HasIndex("ProductId");

                    b.ToTable("opt_marketplaceproduct");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptNotchOrder", b =>
                {
                    b.Property<int>("NotchOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NotchOrderNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("NotchOrderId");

                    b.ToTable("opt_notchorder");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptNotchOrderIncoming", b =>
                {
                    b.Property<int>("NotchOrderIncomingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NotchOrderId")
                        .HasColumnType("int");

                    b.HasKey("NotchOrderIncomingId");

                    b.HasIndex("NotchOrderId");

                    b.ToTable("opt_notchorderincoming");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptNotchOrderIncomingItem", b =>
                {
                    b.Property<int>("NotchOrderIncomingItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("NotchOrderIncomingId")
                        .HasColumnType("int");

                    b.Property<int>("SemiproductId")
                        .HasColumnType("int");

                    b.HasKey("NotchOrderIncomingItemId");

                    b.HasIndex("NotchOrderIncomingId");

                    b.HasIndex("SemiproductId");

                    b.ToTable("opt_notchorderincomingitem");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptNotchOrderItem", b =>
                {
                    b.Property<int>("NotchOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("NotchOrderId")
                        .HasColumnType("int");

                    b.Property<int>("PrintOrderId")
                        .HasColumnType("int");

                    b.HasKey("NotchOrderItemId");

                    b.HasIndex("NotchOrderId");

                    b.HasIndex("PrintOrderId")
                        .IsUnique();

                    b.ToTable("opt_notchorderitem");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrder", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("AssemblyDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ClientAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("ClientID")
                        .HasColumnType("varchar(767) CHARACTER SET utf8mb4")
                        .HasMaxLength(767);

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("DiscountedSum")
                        .HasColumnType("double");

                    b.Property<DateTime?>("DoneDate")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("EventDiscountPercent")
                        .HasColumnType("float");

                    b.Property<int?>("EventId")
                        .HasColumnName("EventID")
                        .HasColumnType("int(11)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("OrderSizeDiscountPercent")
                        .HasColumnType("double");

                    b.Property<int>("OrderStatusId")
                        .HasColumnName("OrderStatusID")
                        .HasColumnType("int(11)");

                    b.Property<long?>("PersonalDiscountId")
                        .HasColumnType("bigint");

                    b.Property<double?>("PersonalDiscountPercent")
                        .HasColumnType("double");

                    b.Property<int?>("RequisitesId")
                        .HasColumnName("RequisitesID")
                        .HasColumnType("int(11)");

                    b.Property<int>("ShortOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShortOrderID")
                        .HasColumnType("int");

                    b.Property<double>("TotalSum")
                        .HasColumnType("double");

                    b.Property<double>("TotalWeight")
                        .HasColumnType("double");

                    b.Property<string>("TrackNo")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UpdNum")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("OrderId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EventId");

                    b.HasIndex("OrderStatusId")
                        .HasName("Opt_ProductStatus");

                    b.HasIndex("PersonalDiscountId");

                    b.HasIndex("RequisitesId");

                    b.ToTable("opt_order");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderPhoto", b =>
                {
                    b.Property<int>("OrderPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderPhotoID")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("PhotoDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PhotoPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("OrderPhotoId");

                    b.HasIndex("OrderId");

                    b.ToTable("opt_orderphoto");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderSizeDiscount", b =>
                {
                    b.Property<int>("OrdersizeDiscountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderSizeDiscountID")
                        .HasColumnType("int");

                    b.Property<int>("ClientType")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStart")
                        .HasColumnType("datetime");

                    b.Property<double>("DiscountPercent")
                        .HasColumnType("double");

                    b.Property<float>("From")
                        .HasColumnType("float");

                    b.Property<float>("To")
                        .HasColumnType("float");

                    b.HasKey("OrdersizeDiscountId");

                    b.ToTable("opt_ordersizediscount");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderpayment", b =>
                {
                    b.Property<int>("OrderPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderPaymentID")
                        .HasColumnType("int");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<Guid>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("OrderPaymentDate")
                        .HasColumnType("datetime");

                    b.HasKey("OrderPaymentId");

                    b.HasIndex("OrderId")
                        .HasName("Opt_OrderPayment");

                    b.ToTable("opt_orderpayment");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderproduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderProductID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("OrderId")
                        .HasColumnName("OrderID")
                        .HasColumnType("char(36)");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int(11)");

                    b.Property<int>("ProductPriceId")
                        .HasColumnType("int(11)");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId")
                        .HasName("Opt_OrderProduct");

                    b.HasIndex("ProductId")
                        .HasName("Opt_OrderProductItself");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("opt_orderproduct");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderstatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("OrderStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("OrderStatusId");

                    b.ToTable("opt_orderstatus");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPaper", b =>
                {
                    b.Property<int>("PaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaperID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("TypeOfPaperId")
                        .HasColumnType("int");

                    b.HasKey("PaperId");

                    b.HasIndex("TypeOfPaperId");

                    b.ToTable("opt_paper");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPaperOrder", b =>
                {
                    b.Property<int>("PaperOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaperOrderID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("FormatId")
                        .HasColumnName("FormatID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceNum")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("OrderSum")
                        .HasColumnType("double");

                    b.Property<double?>("PaidSum")
                        .HasColumnType("double");

                    b.Property<int>("PaperId")
                        .HasColumnName("PaperID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RecieverCounterPartyId")
                        .HasColumnName("RecieverCounterPartyID")
                        .HasColumnType("int");

                    b.Property<int>("SheetCount")
                        .HasColumnType("int");

                    b.Property<double>("SheetPrice")
                        .HasColumnType("double");

                    b.Property<int>("SupplierCounterPartyId")
                        .HasColumnName("SupplierCounterPartyID")
                        .HasColumnType("int");

                    b.HasKey("PaperOrderId");

                    b.HasIndex("FormatId");

                    b.HasIndex("PaperId");

                    b.HasIndex("RecieverCounterPartyId");

                    b.HasIndex("SupplierCounterPartyId");

                    b.ToTable("opt_paperorder");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPaperOrderIncoming", b =>
                {
                    b.Property<int>("PaperOrderIncomingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PaperOrderId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseTypeId")
                        .HasColumnType("int");

                    b.HasKey("PaperOrderIncomingId");

                    b.HasIndex("PaperOrderId");

                    b.HasIndex("WarehouseTypeId");

                    b.ToTable("opt_paperorderincoming");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPaperOrderRole", b =>
                {
                    b.Property<int>("PaperOrderRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PaperOrderRoleID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("PaperOrderRoleId");

                    b.ToTable("opt_paperorderrole");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrder", b =>
                {
                    b.Property<int>("PrintOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOrderID")
                        .HasColumnType("int");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("ConfirmPrint")
                        .HasColumnName("ConfirmPrint")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsAssembled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool?>("IsPaid")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnName("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<double>("OrderSum")
                        .HasColumnType("double");

                    b.Property<int?>("PaperPlannedExpense")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Printing")
                        .HasColumnName("Printing")
                        .HasColumnType("int(11)");

                    b.Property<string>("PrintingHouseOrderNum")
                        .HasColumnName("PrintingHouseOrderNum")
                        .HasColumnType("varchar(20)");

                    b.HasKey("PrintOrderId");

                    b.ToTable("opt_printorder");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderIncoming", b =>
                {
                    b.Property<int>("PrintOrderIncomingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOrderIncomingID")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomingDate")
                        .HasColumnName("IncomingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PrintOrderId")
                        .HasColumnName("PrintOrderID")
                        .HasColumnType("int(20)");

                    b.HasKey("PrintOrderIncomingId");

                    b.HasIndex("PrintOrderId");

                    b.ToTable("opt_printorderincoming");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderIncomingItem", b =>
                {
                    b.Property<int>("PrintOrderIncomingItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOrderIncomingItemID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("int(11)");

                    b.Property<int>("PrintOrderIncomingId")
                        .HasColumnName("PrintOrderIncomingID")
                        .HasColumnType("int(20)");

                    b.Property<int>("PrintOrderSemiproductId")
                        .HasColumnName("PrintOrderSemiproductID")
                        .HasColumnType("int(20)");

                    b.HasKey("PrintOrderIncomingItemId");

                    b.HasIndex("PrintOrderIncomingId");

                    b.HasIndex("PrintOrderSemiproductId");

                    b.ToTable("opt_printorderincomingitem");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderPaper", b =>
                {
                    b.Property<int>("PrintOrderPaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOrderPaperID")
                        .HasColumnType("int");

                    b.Property<int>("PaperOrderId")
                        .HasColumnName("PaperOrderID")
                        .HasColumnType("int(20)");

                    b.Property<int>("PrintOrderId")
                        .HasColumnType("int");

                    b.Property<int>("SheetsTakenAmount")
                        .HasColumnType("int");

                    b.HasKey("PrintOrderPaperId");

                    b.HasIndex("PaperOrderId");

                    b.HasIndex("PrintOrderId");

                    b.ToTable("opt_printorderpaper");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderPayment", b =>
                {
                    b.Property<int>("PrintOrderPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOrderPaymentID")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PrintOrderId")
                        .HasColumnType("int");

                    b.HasKey("PrintOrderPaymentId");

                    b.HasIndex("PrintOrderId");

                    b.ToTable("opt_printorderpayment");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderSemiproduct", b =>
                {
                    b.Property<int>("PrintOrderSemiproductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PrintOrderSemiproductID")
                        .HasColumnType("int");

                    b.Property<bool>("IsAssembled")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PrintOrderId")
                        .HasColumnName("PrintOrderID")
                        .HasColumnType("int(20)");

                    b.Property<int>("SemiproductId")
                        .HasColumnName("SemiProductID")
                        .HasColumnType("int");

                    b.HasKey("PrintOrderSemiproductId");

                    b.HasIndex("PrintOrderId");

                    b.HasIndex("SemiproductId");

                    b.ToTable("opt_printordersemiproduct");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductID")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ISBN")
                        .HasColumnType("varchar(13) CHARACTER SET utf8mb4")
                        .HasMaxLength(13);

                    b.Property<string>("Information")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IsKit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("LongDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("ProductKindId")
                        .HasColumnName("ProductKindID")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ProductSeriesId")
                        .HasColumnName("ProductSeriesID")
                        .HasColumnType("int(11)");

                    b.Property<string>("ProductUrl")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<string>("RegionalName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ReviewsText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SiteName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("VideoFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<float>("Weight")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductKindId")
                        .HasName("Opt_Product_Kind");

                    b.HasIndex("ProductSeriesId");

                    b.ToTable("opt_product");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductImage", b =>
                {
                    b.Property<int>("ProductImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ImageType")
                        .HasColumnType("int");

                    b.Property<bool>("IsCover")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ProductImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("opt_productimage");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductTag", b =>
                {
                    b.Property<int>("ProductTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ProductTagId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TagId");

                    b.ToTable("opt_producttag");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductkind", b =>
                {
                    b.Property<int>("ProductKindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductKindID")
                        .HasColumnType("int");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("ProductKindId");

                    b.ToTable("opt_productkind");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductprice", b =>
                {
                    b.Property<int>("ProductPriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductPriceId")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnName("DateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateStart")
                        .IsRequired()
                        .HasColumnName("DateStart")
                        .HasColumnType("datetime");

                    b.Property<double>("Price")
                        .HasColumnType("DOUBLE");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int(11)");

                    b.HasKey("ProductPriceId");

                    b.HasIndex("ProductId")
                        .HasName("Opt_Product");

                    b.ToTable("opt_productprice");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductseries", b =>
                {
                    b.Property<int>("ProductSeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ProductSeriesID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProductKindId")
                        .HasColumnType("int");

                    b.Property<string>("SiteName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("ProductSeriesId");

                    b.ToTable("opt_productseries");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReport", b =>
                {
                    b.Property<string>("ReportId")
                        .HasColumnName("ReportID")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool?>("IsVirtual")
                        .HasColumnType("tinyint(1)");

                    b.Property<double?>("PaidSum")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ReportDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ReportKindId")
                        .HasColumnName("ReportKindID")
                        .HasColumnType("int(11)");

                    b.Property<int>("ReportMonth")
                        .HasColumnType("int(2)");

                    b.Property<string>("ReportNum")
                        .HasColumnType("varchar(45) CHARACTER SET utf8mb4")
                        .HasMaxLength(45);

                    b.Property<DateTime?>("ReportPeriodFrom")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ReportPeriodTo")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ReportYear")
                        .HasColumnType("int(4)");

                    b.Property<int>("ShopId")
                        .HasColumnName("ShopID")
                        .HasColumnType("int(11)");

                    b.Property<double>("TotalSum")
                        .HasColumnType("double");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime");

                    b.HasKey("ReportId");

                    b.HasIndex("ReportKindId")
                        .HasName("Opt_Report_ReportKindID");

                    b.HasIndex("ShopId")
                        .HasName("Opt_Report_ShopID_idx");

                    b.ToTable("opt_report");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReportCriteria", b =>
                {
                    b.Property<int>("CriteriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CriteriaId")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnName("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("GroupId")
                        .HasColumnName("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("Information")
                        .HasColumnName("Information")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("CriteriaId");

                    b.HasIndex("GroupId");

                    b.ToTable("opt_reportcriteria");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReportCriteriaGroup", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("GroupId")
                        .HasColumnType("int");

                    b.Property<string>("GroupName")
                        .HasColumnName("GroupName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsMain")
                        .HasColumnName("IsMain")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ReportKind")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnName("ShopId")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("GroupId");

                    b.HasIndex("ShopId");

                    b.ToTable("opt_reportcriteriagroup");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReportitem", b =>
                {
                    b.Property<int>("ReportItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReportItemID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int(10)");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int(11)");

                    b.Property<string>("ReportId")
                        .HasColumnName("ReportID")
                        .HasColumnType("varchar(150)");

                    b.Property<double>("TotalSum")
                        .HasColumnName("TotalSum")
                        .HasColumnType("double");

                    b.HasKey("ReportItemId");

                    b.HasIndex("ProductId")
                        .HasName("Opt_ReportItem_ProductID_idx");

                    b.HasIndex("ReportId");

                    b.ToTable("opt_reportitem");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReportkind", b =>
                {
                    b.Property<int>("ReportKindId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ReportKindID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("ReportKindId");

                    b.ToTable("opt_reportkind");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptRequisites", b =>
                {
                    b.Property<int>("RequisitesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RequisitesID")
                        .HasColumnType("int");

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUsed")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("RequisitesText")
                        .IsRequired()
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("RequisitesId");

                    b.ToTable("opt_requisites");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproduct", b =>
                {
                    b.Property<int>("SemiproductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SemiproductID")
                        .HasColumnType("int");

                    b.Property<int?>("CutLength")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("FormatId")
                        .HasColumnType("int");

                    b.Property<bool>("HaveStochastics")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("HaveWDVarnish")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUniversal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int(11)");

                    b.Property<int>("SemiproductTypeId")
                        .HasColumnName("SemiproductTypeID")
                        .HasColumnType("int(11)");

                    b.Property<int>("StripNumber")
                        .HasColumnType("int");

                    b.HasKey("SemiproductId");

                    b.HasIndex("FormatId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SemiproductTypeId");

                    b.ToTable("opt_semiproduct");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductPaper", b =>
                {
                    b.Property<int>("SemiproductPaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SemiproductPaperID")
                        .HasColumnType("int");

                    b.Property<int>("PaperId")
                        .HasColumnName("PaperID")
                        .HasColumnType("int");

                    b.Property<int>("SemiproductId")
                        .HasColumnName("SemiproductID")
                        .HasColumnType("int");

                    b.HasKey("SemiproductPaperId");

                    b.HasIndex("PaperId");

                    b.HasIndex("SemiproductId");

                    b.ToTable("opt_semiproductpaper");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductProductRelation", b =>
                {
                    b.Property<int>("SemiproductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("SemiproductId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("opt_semiproductproductrelation");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductType", b =>
                {
                    b.Property<int>("SemiproductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SemiproductTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.HasKey("SemiproductTypeId");

                    b.ToTable("opt_semiproducttype");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductWarehouse", b =>
                {
                    b.Property<int>("SemiproductWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("WarehouseActionTypeId")
                        .HasColumnType("int");

                    b.HasKey("SemiproductWarehouseId");

                    b.HasIndex("WarehouseActionTypeId");

                    b.ToTable("opt_semiproductwarehouse");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductWarehouseItem", b =>
                {
                    b.Property<int>("SemiproductWarehouseItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("SemiproductWarehouseItemID")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<int>("SemiproductId")
                        .HasColumnName("SemiproductID")
                        .HasColumnType("int(11)");

                    b.Property<int>("SemiproductWarehouseId")
                        .HasColumnName("SemiproductWarehouseID")
                        .HasColumnType("int(11)");

                    b.HasKey("SemiproductWarehouseItemId");

                    b.HasIndex("SemiproductId");

                    b.HasIndex("SemiproductWarehouseId");

                    b.ToTable("opt_semiproductwarehouseitem");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptShop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShopID")
                        .HasColumnType("int");

                    b.Property<string>("Consignee")
                        .HasColumnType("varchar(200) CHARACTER SET utf8mb4")
                        .HasMaxLength(200);

                    b.Property<bool>("Enabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<bool>("IgnoreInWarehouseCalc")
                        .HasColumnType("tinyint(1)");

                    b.Property<ulong?>("IsMarketPlace")
                        .HasColumnType("bit(1)");

                    b.Property<string>("MimeType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<ulong?>("NonResident")
                        .HasColumnType("bit(1)");

                    b.Property<short?>("Postponement")
                        .HasColumnType("smallint");

                    b.Property<string>("ScanFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ShopUrl")
                        .HasColumnType("varchar(500) CHARACTER SET utf8mb4")
                        .HasMaxLength(500);

                    b.HasKey("ShopId");

                    b.ToTable("opt_shop");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptShopName", b =>
                {
                    b.Property<int>("ShopNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ShopNameID")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Inn")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("ShopNameId");

                    b.HasIndex("ShopId");

                    b.ToTable("opt_shopname");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSiteFilter", b =>
                {
                    b.Property<int>("SiteFilterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsInternal")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SiteFilterId");

                    b.ToTable("opt_sitefilter");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSiteFilterProduct", b =>
                {
                    b.Property<int>("SiteFilterProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("SiteFilterId")
                        .HasColumnType("int");

                    b.HasKey("SiteFilterProductId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SiteFilterId");

                    b.ToTable("opt_sitefilterproduct");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("int");

                    b.Property<string>("TagName")
                        .HasColumnType("varchar(50)");

                    b.HasKey("TagId");

                    b.ToTable("opt_tag");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptTypeOfPaper", b =>
                {
                    b.Property<int>("TypeOfPaperId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasKey("TypeOfPaperId");

                    b.ToTable("opt_typesofpaper");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptUpdPayment", b =>
                {
                    b.Property<int>("UpdPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UpdPaymentID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("UpdNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UpdPaymentId");

                    b.HasIndex("ShopId");

                    b.ToTable("opt_updpayment");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptUtmStatistics", b =>
                {
                    b.Property<int>("StatisticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UtmCampaign")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UtmContent")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UtmMedium")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UtmSource")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UtmTerm")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("StatisticsId");

                    b.ToTable("opt_utmstatistics");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouse", b =>
                {
                    b.Property<int>("WarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateAdd")
                        .HasColumnType("datetime");

                    b.Property<int>("WarehouseActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseTypeId")
                        .HasColumnType("int");

                    b.HasKey("WarehouseId");

                    b.HasIndex("WarehouseActionTypeId");

                    b.HasIndex("WarehouseTypeId");

                    b.ToTable("opt_warehouse");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouseActionType", b =>
                {
                    b.Property<int>("WarehouseActionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WarehouseActionTypeID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("string");

                    b.HasKey("WarehouseActionTypeId");

                    b.ToTable("opt_WarehouseActionType");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouseItem", b =>
                {
                    b.Property<int>("WarehouseItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<int?>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnName("ProductID")
                        .HasColumnType("int(11)");

                    b.Property<int>("WarehouseId")
                        .HasColumnName("WarehouseID")
                        .HasColumnType("int(11)");

                    b.HasKey("WarehouseItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("opt_warehouseitem");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouseJournal", b =>
                {
                    b.Property<long>("WarehousejournalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WarehousejournalID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ActionExtendedTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ActionId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectTypeId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseTypeId")
                        .HasColumnType("int");

                    b.HasKey("WarehousejournalId");

                    b.HasIndex("WarehouseTypeId");

                    b.ToTable("opt_warehousejournal");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouseType", b =>
                {
                    b.Property<int>("WarehouseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("CounterpartyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("ReadyToUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<int>("WarehouseObjectType")
                        .HasColumnType("int");

                    b.HasKey("WarehouseTypeId");

                    b.HasIndex("CounterpartyId");

                    b.ToTable("opt_warehousetype");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWbOrder", b =>
                {
                    b.Property<long>("WbOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WbOrderID")
                        .HasColumnType("bigint");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("IncomeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NmId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Oblast")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Odid")
                        .HasColumnType("bigint");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SupplierArticle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TechSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("WbOrderId");

                    b.ToTable("opt_wborder");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWbSale", b =>
                {
                    b.Property<long>("WbSaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WbSaleID")
                        .HasColumnType("bigint");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CountryName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("DiscountPercent")
                        .HasColumnType("decimal(65,30)");

                    b.Property<double>("FinishedPrice")
                        .HasColumnType("double");

                    b.Property<double>("ForPay")
                        .HasColumnType("double");

                    b.Property<string>("GNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("IncomeID")
                        .HasColumnType("int");

                    b.Property<bool>("IsRealization")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsStorno")
                        .HasColumnType("int");

                    b.Property<bool>("IsSupply")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NmId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("OblastOkrugName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("Odid")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<double>("PriceWithDisc")
                        .HasColumnType("double");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PromoCodeDiscount")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SaleID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Spp")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SupplierArticle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TechSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("WbSaleId");

                    b.ToTable("opt_wbsale");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWbWarehouse", b =>
                {
                    b.Property<long>("WbWarehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("WbWarehouseID")
                        .HasColumnType("bigint");

                    b.Property<string>("Barcode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Category")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("DaysOnSite")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("InWayFromClient")
                        .HasColumnType("int");

                    b.Property<int>("InWayToClient")
                        .HasColumnType("int");

                    b.Property<bool>("IsRealization")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSupply")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastChangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NmId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuantityFull")
                        .HasColumnType("int");

                    b.Property<int>("QuantityNotInOrders")
                        .HasColumnType("int");

                    b.Property<string>("SCCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SupplierArticle")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("TechSize")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("WarehouseName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("WbWarehouseId");

                    b.ToTable("opt_wbWarehouse");
                });

            modelBuilder.Entity("ICan.Common.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsClient")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("ShopID")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("ShopID");

                    b.ToTable("aspnetusers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("varchar(256) CHARACTER SET utf8mb4")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Value")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptAssembly", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("Assemblies")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_Assembly_ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptWarehouse", "Warehouse")
                        .WithOne("Assembly")
                        .HasForeignKey("ICan.Common.Domain.OptAssembly", "WarehouseId")
                        .HasConstraintName("Opt_Assembly_WarehouseID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ICan.Common.Domain.OptAssemblySemiproduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptAssembly", "Assembly")
                        .WithMany("AssemblySemiproducts")
                        .HasForeignKey("AssemblyId")
                        .HasConstraintName("Opt_Assembly_AssemblySemiproduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptNotchOrder", "NotchOrder")
                        .WithMany("AssemblyNotchOrders")
                        .HasForeignKey("NotchOrderId")
                        .HasConstraintName("Opt_AssemblySemiproduct_NotchOrderID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ICan.Common.Domain.OptPrintOrderSemiproduct", "PrintOrderSemiproduct")
                        .WithMany("AssemblySemiproducts")
                        .HasForeignKey("PrintOrderSemiproductId")
                        .HasConstraintName("Opt_PrintOrderSemiproduct_AssemblySemiproduct")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ICan.Common.Domain.OptCounterparty", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPaperOrderRole", "PaperOrderRole")
                        .WithMany("CounterParties")
                        .HasForeignKey("PaperOrderRoleId")
                        .HasConstraintName("Opt_CounterParty_PaperOrderRoleID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptKitproduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "MainProduct")
                        .WithMany("KitProducts")
                        .HasForeignKey("MainProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithOne("KitPart")
                        .HasForeignKey("ICan.Common.Domain.OptKitproduct", "ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptMarketplaceProduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptMarketplace", "Marketplace")
                        .WithMany("MarketplaceProducts")
                        .HasForeignKey("MarketplaceId")
                        .HasConstraintName("Opt_MarketplaceProduct_MarketplaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("MarketplaceProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_MarketplaceProduct_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptNotchOrderIncoming", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptNotchOrder", "NotchOrder")
                        .WithMany("NotchOrderIncomings")
                        .HasForeignKey("NotchOrderId")
                        .HasConstraintName("Opt_NotchOrderIncoming_NotchOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptNotchOrderIncomingItem", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptNotchOrderIncoming", "NotchOrderIncoming")
                        .WithMany("IncomingItems")
                        .HasForeignKey("NotchOrderIncomingId")
                        .HasConstraintName("Opt_NotchOredIncomingItem_NotchOrderIncomingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptSemiproduct", "Semiproduct")
                        .WithMany("NotchOrderIncomingItems")
                        .HasForeignKey("SemiproductId")
                        .HasConstraintName("Opt_NotchOredIncomingItem_SemiproductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptNotchOrderItem", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptNotchOrder", "NotchOrder")
                        .WithMany("NotchOrderItems")
                        .HasForeignKey("NotchOrderId")
                        .HasConstraintName("Opt_NotchOrderItem_NotchOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptPrintOrder", "PrintOrder")
                        .WithOne("NotchOrderItem")
                        .HasForeignKey("ICan.Common.Domain.OptNotchOrderItem", "PrintOrderId")
                        .HasConstraintName("Opt_NotchOrderItem_PrintOrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrder", b =>
                {
                    b.HasOne("ICan.Common.Models.ApplicationUser", "Client")
                        .WithMany("OptOrder")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptEvent", "Event")
                        .WithMany("OptOrder")
                        .HasForeignKey("EventId")
                        .HasConstraintName("Opt_Event")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ICan.Common.Domain.OptOrderstatus", "OrderStatus")
                        .WithMany("OptOrder")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("Opt_ProductStatus")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptDiscount", "Discount")
                        .WithMany("OptOrder")
                        .HasForeignKey("PersonalDiscountId")
                        .HasConstraintName("FK_Order_DiscountID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ICan.Common.Domain.OptRequisites", "Requisites")
                        .WithMany("OptOrders")
                        .HasForeignKey("RequisitesId")
                        .HasConstraintName("FK_Order_RequisitesID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderPhoto", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptOrder", "Order")
                        .WithMany("Photos")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("Opt_OrderPhoto_Order")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderpayment", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptOrder", "Order")
                        .WithMany("OptOrderpayments")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("Opt_OrderPayment_OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptOrderproduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptOrder", "Order")
                        .WithMany("OptOrderproducts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("Opt_OrderProduct_OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("OptOrderproduct")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_OrderProduct_ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptProductprice", "ProductPrice")
                        .WithMany("OptOrderproduct")
                        .HasForeignKey("ProductPriceId")
                        .HasConstraintName("Opt_Orderproduct_ProductPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPaper", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptTypeOfPaper", "TypeOfPaper")
                        .WithMany("Papers")
                        .HasForeignKey("TypeOfPaperId")
                        .HasConstraintName("Opt_Paper_TypeOfPaperId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPaperOrder", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptFormat", "Format")
                        .WithMany("PaperOrders")
                        .HasForeignKey("FormatId")
                        .HasConstraintName("Opt_PaperOrder_FormatID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptPaper", "Paper")
                        .WithMany("PaperOrders")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("Opt_PaperOrder_PaperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptCounterparty", "RecieverCounterParty")
                        .WithMany("PaperOrderRecievers")
                        .HasForeignKey("RecieverCounterPartyId")
                        .HasConstraintName("Opt_PaperOrder_RecieverCounterPartyID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ICan.Common.Domain.OptCounterparty", "SupplierCounterParty")
                        .WithMany("PaperOrderSuppliers")
                        .HasForeignKey("SupplierCounterPartyId")
                        .HasConstraintName("Opt_PaperOrder_SupplierCounterPartyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPaperOrderIncoming", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPaperOrder", "PaperOrder")
                        .WithMany("PaperOrderIncomings")
                        .HasForeignKey("PaperOrderId")
                        .HasConstraintName("Opt_PaperOrderIncomig_PaperOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptWarehouseType", "WarehouseType")
                        .WithMany("PaperOrderIncomings")
                        .HasForeignKey("WarehouseTypeId")
                        .HasConstraintName("Opt_PaperOrderIncomig_WarehouseTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderIncoming", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPrintOrder", "PrintOrder")
                        .WithMany("PrintOrderIncomings")
                        .HasForeignKey("PrintOrderId")
                        .HasConstraintName("Opt_PrintOrderIncomin_PrintOrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderIncomingItem", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPrintOrderIncoming", "PrintOrderIncoming")
                        .WithMany("PrintOrderIncomingItems")
                        .HasForeignKey("PrintOrderIncomingId")
                        .HasConstraintName("Opt_PrintOrderIncomingItem_PrintOrderIncomingID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptPrintOrderSemiproduct", "PrintOrderSemiproduct")
                        .WithMany("PrintOrderIncomingItems")
                        .HasForeignKey("PrintOrderSemiproductId")
                        .HasConstraintName("Opt_PrintOrderIncomingItem_PrintOrderSemiproductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderPaper", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPaperOrder", "PaperOrder")
                        .WithMany("PrintOrderPapers")
                        .HasForeignKey("PaperOrderId")
                        .HasConstraintName("Opt_PrintOrderPaper_PaperOrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptPrintOrder", "PrintOrder")
                        .WithMany("PrintOrderPapers")
                        .HasForeignKey("PrintOrderId")
                        .HasConstraintName("Opt_PrintOrderPaper_PrintOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderPayment", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPrintOrder", "PrintOrder")
                        .WithMany("PrintOrderPayments")
                        .HasForeignKey("PrintOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptPrintOrderSemiproduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPrintOrder", "PrintOrder")
                        .WithMany("PrintOrderSemiproducts")
                        .HasForeignKey("PrintOrderId")
                        .HasConstraintName("Opt_PrintOrderSemiproduct_PrintOrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptSemiproduct", "SemiProduct")
                        .WithMany("PrintOrderSemiproducts")
                        .HasForeignKey("SemiproductId")
                        .HasConstraintName("Opt_PrintOrderSemiproduct_SemiproductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptCountry", "Country")
                        .WithMany("Products")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("Opt_Product_CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ICan.Common.Domain.OptProductkind", "ProductKind")
                        .WithMany("OptProduct")
                        .HasForeignKey("ProductKindId")
                        .HasConstraintName("Opt_Product_Kind")
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptProductseries", "ProductSeries")
                        .WithMany()
                        .HasForeignKey("ProductSeriesId");
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductImage", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_ProductImage_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductTag", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("ProductTags")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_ProductTag_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptTag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("Opt_ProductTag_TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptProductprice", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_Product")
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReport", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptReportkind", "ReportKind")
                        .WithMany("OptReport")
                        .HasForeignKey("ReportKindId")
                        .HasConstraintName("Opt_Report_ReportKindID")
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptShop", "Shop")
                        .WithMany("Report")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("Opt_Report_ShopID")
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReportCriteria", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptReportCriteriaGroup", "Group")
                        .WithMany("Criteria")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("Opt_Shop_ReportCriteriaGroup")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReportCriteriaGroup", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptShop", "Shop")
                        .WithMany("CriteriaGroups")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("Opt_Shop_ReportCriteriaGroup")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptReportitem", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptReport", "Report")
                        .WithMany("ReportItems")
                        .HasForeignKey("ReportId")
                        .HasConstraintName("Opt_ReportItem_ReportID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptFormat", "Format")
                        .WithMany("Semiproducts")
                        .HasForeignKey("FormatId")
                        .HasConstraintName("Opt_SemiProduct_FormatID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("Semiproducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_SemiProduct_ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptSemiproductType", "SemiproductType")
                        .WithMany("Semiproducts")
                        .HasForeignKey("SemiproductTypeId")
                        .HasConstraintName("Opt_SemiProduct_SemiproductTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductPaper", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptPaper", "Paper")
                        .WithMany("SemiproductPapers")
                        .HasForeignKey("PaperId")
                        .HasConstraintName("Opt_SemiProductPaper_PaperID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptSemiproduct", "Semiproduct")
                        .WithMany("SemiproductPapers")
                        .HasForeignKey("SemiproductId")
                        .HasConstraintName("Opt_SemiProductPaper_SemiproductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductProductRelation", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("RelatedSemiproducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptSemiproduct", "Semiproduct")
                        .WithMany("RelatedProducts")
                        .HasForeignKey("SemiproductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductWarehouse", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptWarehouseActionType", "WarehouseActionType")
                        .WithMany("SemiproductWarehouses")
                        .HasForeignKey("WarehouseActionTypeId")
                        .HasConstraintName("Opt_SemiproductWarehouse_WarehouseActionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSemiproductWarehouseItem", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptSemiproduct", "Semiproduct")
                        .WithMany("SemiproductWarehouseItems")
                        .HasForeignKey("SemiproductId")
                        .HasConstraintName("Opt_SemiproductWarehouseItem_SemiproductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptSemiproductWarehouse", "SemiproductWarehouse")
                        .WithMany("SemiproductWarehouseItems")
                        .HasForeignKey("SemiproductWarehouseId")
                        .HasConstraintName("Opt_SemiproductWarehouseItem_SemiproductWarehouseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptShopName", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptShop", "Shop")
                        .WithMany("ShopNames")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("Opt_ShopName_SHopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptSiteFilterProduct", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("SiteFilterProducts")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_SiteFilterProduct_ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptSiteFilter", "SiteFilter")
                        .WithMany("Products")
                        .HasForeignKey("SiteFilterId")
                        .HasConstraintName("Opt_SiteFilterProduct_SiteFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptUpdPayment", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptShop", "Shop")
                        .WithMany("UpdPayments")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouse", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptWarehouseActionType", "WarehouseActionType")
                        .WithMany("Warehouses")
                        .HasForeignKey("WarehouseActionTypeId")
                        .HasConstraintName("Opt_Warehouse_WarehouseActionTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ICan.Common.Domain.OptWarehouseType", "WarehouseType")
                        .WithMany("Warehouses")
                        .HasForeignKey("WarehouseTypeId")
                        .HasConstraintName("Opt_Warehouse_WarehouseTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouseItem", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptProduct", "Product")
                        .WithMany("OptWarehouseItem")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("Opt_WarehouseItemProduct")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ICan.Common.Domain.OptWarehouse", "Warehouse")
                        .WithMany("WarehouseItems")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouseJournal", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptWarehouseType", "WarehouseType")
                        .WithMany("WarehouseJournal")
                        .HasForeignKey("WarehouseTypeId")
                        .HasConstraintName("Opt_WarehouseJournal_WarehouseTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("ICan.Common.Domain.OptWarehouseType", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptCounterparty", "Counterparty")
                        .WithMany("WarehouseTypes")
                        .HasForeignKey("CounterpartyId")
                        .HasConstraintName("Opt_WarehouseType_CounterpartyID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("ICan.Common.Models.ApplicationUser", b =>
                {
                    b.HasOne("ICan.Common.Domain.OptShop", "Shop")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("ShopID")
                        .HasConstraintName("Opt_Aspenetusers_ShopId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ICan.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ICan.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ICan.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ICan.Common.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
