@model ICan.Common.Models.Opt.AssemblyModel

@{
	bool.TryParse(ViewData["IsAdmin"]?.ToString(), out var isAdmin);
	bool.TryParse(ViewData["IsOperator"]?.ToString(), out var isOperator);
	bool.TryParse(ViewData["IsStorekeeper"]?.ToString(), out var isStoreKeeper);
	bool.TryParse(ViewData["IsAssembler"]?.ToString(), out var isAssembler);
	var products = (IEnumerable<SelectListItem>)ViewData["ProductId"];
	var title = "Навивка календаря";
	ViewData["Title"] = title;
}

<h2>@title</h2>

<hr />
<span class="alert-danger">@TempData["ErrorMessage"]</span>
<span class="text-success">@TempData["StatusMessage"]</span>


<form asp-action="Create">
	<div class="row">
		<div class="col-md-4">
			<div asp-validation-summary="ModelOnly" class="text-danger"></div>
			<input asp-for="AssemblyType" hidden />
			<div class="form-group">
				<label asp-for="Date" class="control-label"></label>
				<sup><i class="fas fa-asterisk" style="font-size: 10px; color: red"></i></sup>
				@Html.TextBoxFor(m => m.Date, "{0:dd.MM.yyyy HH:mm}", new { @type = "datetime", @class = "form-control" })
				<span asp-validation-for="Date" class="text-danger"></span>  

			</div>
			<div class="form-group">
				<label asp-for="ProductId" class="control-label"></label>
				<sup><i class="fas fa-asterisk" style="font-size: 10px; color: red"></i></sup>
				@Html.DropDownListFor(model => model.ProductId, products, null, new { @class = "form-control product-list" })
				<span asp-validation-for="ProductId" class="text-danger"></span>
			</div>
			<div class="form-group">
				<label asp-for="Amount" class="control-label"></label>
				<sup><i class="fas fa-asterisk" style="font-size: 10px; color: red"></i></sup>
				<input asp-for="Amount" class="form-control" />
				<span asp-validation-for="Amount" class="text-danger"></span>
			</div>

			<div class="form-group">
				<input type="submit" value="Сохранить" class="btn btn-default" />
			</div>
		</div>
		<div class="col-md-4 semiprods-orders">
			@if (Model.SemiproductsWithPrintOrders != null && Model.SemiproductsWithPrintOrders.Any())
			{
				var counter = 0;

				var selectedPinrOrderSemiproducts = Model.AssemblySemiproducts?.Select(item => item.PrintOrderSemiproductId);
				foreach (var printOrderSemiproducts in Model.SemiproductsWithPrintOrders)
				{
					var keyFieldName = @printOrderSemiproducts.Key.SemiproductTypeName.Equals("Наклейки", StringComparison.InvariantCultureIgnoreCase)
						? "NotchOrderId"
						: "PrintOrderSemiproductId";
					<div class="form-group">
						<label class="control-label semiproductName">@printOrderSemiproducts.Key.SemiproductTypeName</label>
						<select class="form-control list-orders[@counter]"
								name="AssemblySemiproducts[@counter].@keyFieldName">
							@foreach (var order in printOrderSemiproducts.Value)
							{
								var selectedItem = selectedPinrOrderSemiproducts?.Contains(order.Key) ?? false;

								<option value="@order.Key" selected="@selectedItem">@order.Value</option>
							}
						</select>
					</div>counter++;
				}
			}
		</div>
	</div>
</form>




<div>
	<a asp-action="Index">Назад к списку</a>
</div>
<script src="~/js/assembly.js" asp-append-version="true"></script>
@section Scripts {
	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
